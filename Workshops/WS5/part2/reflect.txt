>>> Questions:
- the difference between the implementations/utilizations of a functor and a lambda expression. When is appropriate to use each one?
A functor is a function object. It can be defined as the class of which function objects are instantiated. In other words, is where operator() is overridden. A lambda expression is a function object that is only used in a local area of an application; therefore, is a convenient way of defining an anonymous function object right at the location where it is invoked or passed as an argument to a function. Ir provides better readability.

A functor has a type and can be thrown around the same way an object is. It has the same flexibility as a function, so it can be used to perform the same operator on different types in different parts of a program; however, sometimes reusability is not necessary and we don't want to separate an appropriate place for a function we may need only in one particular place. That's what lambda expressions are here for. So the main advantages of lamba expressions are: (1) no need for writing a full class; (2) no need to find an appropriate name for the class; (3) no need to find a good place for the class; (4) enhanced readability for simple use-cases.

Differences in implementation:
>>Functor
FunctorClass aFunctor;
aFunctor();

>>Lambda expression
[](int value) {return 0 < value && value < 10;}

>> Lambda expression saved in a a variable
auto isBetweenZeroAndTen = [](int value) 
{
  return 0 < value && value < 10;
}

It is worthy mentioning that lambda expressions has a capture lists, which entails in a list of the capture specifications for the non-local variables accessed by the function body. 

- the constructor for SpellChecker generates an exception in certain conditions. How would you change your code to achieve the same result, but without exceptions (both on the constructor and on the client side)? Compare the two solutions.
The constructor for SpellChecker generates an exception if it the file passed as a parameter does not exist. If we simply remove the throw "Bad file name!" statement in the if block, the program will remain hanging, waiting for the right file; therefore, this has to be handle somehow. In the workshop, the module reports the exception with "throw". An alternative approach to it would be to have used return values for checking abnormal exits. There are two functions that initiate abnormal termination: void std::terminate() and void std::abort(). terminate() would be suitable in the case explored here.

- the classes Movie and Book contain almost identical logic in loading data from the file. How would you redesign the classes in order not to duplicate that logic?
We could have created a parent abstract class, maybe called "media", considering that both movies and books are a kind of media, and then designed media as a parent class, having Movie and Book as a derived class. This would prevent the logic of those classes of being duplicated.

- the classes Movie and Book are instantiated from the main() function using a custom constructor, but they also contain a default constructor. Is the default constructor necessary? Could you remove it? Justify your answer.
The default constructor can be removed. Creating a custom constructor prevents a default constructor from being implicitly created. If we don't want to use a default constructor, we can pass in arguments to use the custom one.

>>> Learning outcomes:
In this workshop, I learnt how to design and code a templated class that allocates and deallocates dynamic memory. The collection module is a templated class that manages a dynamically allocated array of objects of type T. Since its code is pretty long, I will not add any details about it in here.

I also learnt how to design and code a function object. This was done in the SpellChecker module. The explanation of this module is in detailed in the exercise outline, so again there is no value in adding what the module is doing. I added a m_replacedWords array to store how many times each misspelled have been replaced.

Moreover, I learnt how to design and code a lambda expression. This was done in the w2_p2.cpp file to fix the price of a book.
auto update = [usdToCadRate, gbpToCadRate](Book& src) 
{
	if (src.country() == "US") 
	{
		src.price() *= usdToCadRate;
	}
	else if (src.country() == "UK" && src.year() <= 1999 && src.year() >= 1990) 
	{
		src.price() *= gbpToCadRate;
	}
};

In addition, I learnt how to code a member function that receives the address of a callback function to execute. This was done in the collection module. As per outlined by the professor in the w5_p2.cpp file, this happens in the theCollection.setObserver(movieAddedObserver) statement.

Last, I learnt how to throw exceptions of different types in addition of how to distinguish exception types from one another. The exception were handled by the try-catch blocks, and itstype is set in the catch block inside parenthesis. In this workshop, I used catch (std::out_of_range& exception) and catch (const char* msg).